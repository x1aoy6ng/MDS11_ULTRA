import React, { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import IconButton from './button';

// transcript data generated by the model
// consist of id, starttime, endtime, text, isExpanded
// TO UPDATE: here just using a mock transcript data used ...
const mockTranscriptSegments = [
  {
    id: 1,
    startTime: "00:00",
    endTime: "00:25",
    text: "ya lah tek sik gik kmk tauk camne gik nak molah bagus kita madah ngan dekan jak oh kitak rasa benda ya patut sik diteruskan kah caranya nya kah ataupun salah kah gaok gilak kah.",
    isExpanded: false
  },
  {
    id: 2,
    startTime: "01:05",
    endTime: "01:20",
    text: "ya lah tek tapi nembiak kinek tok nang senang nak dmintak complain kinek tok dah ada slot pakey student complain padah ngan dekan terus.",
    isExpanded: false
  },
  {
    id: 3,
    startTime: "02:10",
    endTime: "02:57",
    text: "hmm kamek rasa kita perlu embak pergi yang atasan lah kita padah lok dengan dekan sebenarnya mun kitak sik madah nak daknya sikkan tauk bah apa semua benda tok nya perlu diembak ke atas macam pakey perlu memberatkan dirik datang ngagak dekan and padah apa yg berlaku",
    isExpanded: false
  }
];

// transcript data segment
type TranscriptSegmentProps = {
  segment: {
    id: number;
    startTime: string;
    endTime: string;
    text: string;
    isExpanded: boolean;
  };
  onEdit: (id: number, editedText: string) => void;
  onToggleExpand: (id: number) => void;
};

const TranscriptSegment: React.FC<TranscriptSegmentProps> = ({segment, onEdit, onToggleExpand}) => {
  const [isEditing, setIsEditing] = useState(false);
  const [editedText, setEditedText] = useState(segment.text);
  const textareaRef = useRef<HTMLTextAreaElement>(null);

  // keep the editedText in sync if segment.text changes externally
  useEffect(() =>{
    if(!isEditing){
      setEditedText(segment.text)
    }
  }, [segment.text, isEditing]);

  // start edit
  const handleStartEdit = () => {
    setIsEditing(true)
    setTimeout(() => textareaRef.current?.focus(), 0);
  }

  // save edit
  const handleSaveEdit = () => {
    if (editedText != segment.text){
       onEdit(segment.id, editedText);
    }
    setIsEditing(false);
  }

  // cancel edit
  const handleCancelEdit = () => {
    setEditedText(segment.text);
    setIsEditing(false);
  }

  // check whether text too long, if yes then make it to be part of text + ....
  // show whole text when toggle expand
  const isLongText = segment.text.length > 150;
  const displayText = 
    !segment.isExpanded && 
    isLongText ? 
      segment.text.substring(0, 150) + '...' 
      : segment.text;

  return (
    <div className='bg-container_segment-light dark:bg-container_segment-dark rounded-lg p-4'>
      <div className='flex items-center justify-between'>
        <span className='text-primary dark:text-primary-dark font-medium text-sm'>{segment.startTime}</span>
        <div>
          {!isEditing && (<button 
            className='text-primary hover:text-blue-800 dark:text-primary-dark'
            onClick={handleStartEdit}
          >
            <span className="material-symbols-rounded" style={{fontSize: '18px'}}>edit_square</span>
          </button>
          )}
        </div>
      </div>

      {/* check whether is editing the text: YES - can save or cancel the edit; ELSE - show more/less */}
      {isEditing ? (
        <div className='space-y-2'>
          <textarea
            className='w-full p-2 mt-2 border border-gray-300 dark:bg-container-dark dark:text-gray-200 rounded-lg resize-none focus:ring-1 focus:ring-[#2A8BFB] focus:border-transparent'
            ref={textareaRef}
            value={editedText}
            onChange={(e) => setEditedText(e.target.value)}
            rows={4}
          />
          <div className='flex gap-3'>
            <button 
              className='flex items-center gap-1 px-2 py-1 text-white bg-green-500 rounded-md text-sm hover:bg-green-600' 
              style={{fontSize:'15px'}}
              onClick={handleSaveEdit}
            >
              save
            </button>

            <button 
              className='flex items-center gap-1 px-2 py-1 text-white bg-red-500 rounded-md text-sm hover:bg-red-600' 
              style={{fontSize:'15px'}}
              onClick={handleCancelEdit}
            >
              cancel
            </button>
          </div>
        </div>
      ) : (
        <div className='flex flex-col'>
            <p className='text-gray-800 dark:text-gray-200 leading-relaxed mb-2'>{displayText}</p>
            
            {/* Only shows the show more/less option if is long text */}
            {isLongText && (
              <div className='mt-1 flex justify-end'>
                <button 
                  className='flex items-center gap-1 text-primary hover:text-blue-800 dark:text-primary-dark text-sm font-medium'
                  onClick={() => onToggleExpand(segment.id)}
                >
                  {segment.isExpanded? (
                    <>
                    <span className="material-symbols-rounded">arrow_drop_up</span>
                    <span className="">Show less</span>
                    </>
                  ):(
                    <>
                    <span className="material-symbols-rounded">arrow_drop_down</span>
                    <span className="text-sm">Show more</span>
                    </>
                  )}
                </button>
              </div>
            )}
        </div>
      )}
    </div>
  );
};

const Transcript: React.FC = () => {
  const navigate = useNavigate();

  // keep track the transcript segment
  const [transcriptSegments, setTranscriptSegments] = useState(mockTranscriptSegments);
  // current time of file processing
  const [currentTime, setCurrentTime] = useState(0)

  // handle transcription file download
  const handleDownload = () => {
    const transcript = transcriptSegments.map(segment => `[${segment.startTime}] ${segment.text}`).join('\n\n')
    const blob = new Blob([transcript], {type: 'text/plain'});
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    link.href = url;
    link.download = 'transcript.txt';
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url)
  };

  // handle edit the transcript segment
  const handleEditSegment = (segmentID: number, newText: string) => {
    setTranscriptSegments(prev =>
      prev.map(segment =>
        segment.id === segmentID ? {...segment, text: newText} : segment
      )
    );
  };

  // handle the toggle expand (show more / show less)
  const handleToggleExpand = (segmentID: number) => {
    setTranscriptSegments(prev =>
      prev.map(segment =>
        segment.id === segmentID? {...segment, isExpanded: !segment.isExpanded}: segment
      )
    )
  }

  // handle youtube video
  const videoContainer = document.getElementById('videoContainer');
  const youtubeVideo = document.getElementById('youtubeVideo');

  // check whether youtube video exists
  // TO UPDATE: will using API here to get youtube video
  const videoExists = true; // replace it with video existence logic here

  if (!videoExists){
    videoContainer?.classList.add('hidden')
  };

  return (
    <div className="flex justify-center items-center  p-8">
      <div className='relative shadow-lg p-4 bg-white dark:bg-[#222222] rounded-xl w-full max-w-7xl min-h-[670px]'>
        {/* close button at top right corner */}
        <div className='absolute -top-4 -right-4 z-10'>
          {/* Close button */}
          <IconButton
            icon={<span className="material-symbols-rounded dark:text-white">close</span>}
            ariaLabel="Close"
            circle
            onClick={() => navigate('/')}
          />
        </div>

        {/* main content */}
        <div className="max-w-6xl mx-auto">
          {/* title */}
          <div className='flex items-center justify-between gap-4 mb-6'>
            <h1 className='text-4xl font-semibold text-[#585858] dark:text-[#F2F2F2] mt-4'>Transcribe</h1>
            
            <div className='flex items-center justify-center gap-3 mt-4'>
              {/* Translate button */}
              <IconButton 
                icon={<span className="material-symbols-rounded">translate</span>}
                ariaLabel="Translate"
                onClick={() => navigate('/translate')}
              >
                Translate
              </IconButton>
              
              {/* Download button */}
              <IconButton
                icon={<span className="material-symbols-rounded">download</span>}
                ariaLabel="Download"
                onClick={handleDownload}
              >
                Download
              </IconButton>
            </div>
          </div>

          {/** file info - TO UPDATE */}
          <div className='mb-4 border-t border-gray-200 dark:border-[#5E5E5E]'>
            <h2 className='text-2xl font-medium text-gray-700 dark:text-white mt-4'>audio-01-3.wav</h2>
            <p className='text-sm dark:text-[#CDCBCB]'>06/06/2025  16:40 PM</p>
          </div>

          {/* main content: two sections */}
          <div className='pt-2'>
            <div className='grid grid-cols-1 lg:grid-cols-2 gap-8'>
              {/* left section: video + audio */}
              <div className='space-y-4'>
                {/* youtube video embed */}
                <div className='bg-black rounded-lg overflow-hidden aspect-video' id='videoContainer'>
                  <iframe
                    id='youtubeVideo'
                    className='w-full h-full'
                    src='https://www.youtube.com/embed/dQw4w9WgXcQ'
                    title='youtube video'
                    allow='accelerometer; autoplay; clipboard-write; encrypted-media; gyroscopre; picture-in-picture'
                    allowFullScreen
                  >
                  </iframe>
                </div>

                {/* TO UPDATE: audio player */}
                <div className='bg-container-dark rounded-lg p-4'>
                  <audio 
                    controls 
                    src="/Kelantan_001_001_002.wav" // TO UPDATE
                    className='w-full rounded-full overflow-hidden'
                    aria-label='audio playback'
                  >
                    Audio element does not supported
                  </audio>
                  <div className='text-sm text-primary dark:text-primary-dark mt-4 flex flex-wrap items-center gap-3'>
                    <span className='font-medium'>Detected language:</span>
                    <span className='inline-block text-[#303030] dark:text-[#C4C4C4] text-sm font-medium'>Sarawakian Malay</span>
                  </div>
                </div>
              </div>

              {/* right section */}
              <div className='space-y-4'>
                {/* <div className='flex items-center justify-between'>
                  <h3 className='text-lg font-semibold text-gray-500'>Transcribed text</h3>
                  <span className='text-sm text-gray-500'>{transcriptSegments.length} segments</span>
                </div> */}

                {/* transcription container */}
                <div className='bg-container-light dark:bg-container-dark shadow-lg min-h-[430px] rounded-lg p-4'>
                  <div className='max-h-96 overflow-y-scroll space-y-3 pr-2'>
                    {transcriptSegments.map((segment) =>
                      <TranscriptSegment
                        key={segment.id}
                        segment={segment}
                        onEdit={handleEditSegment}
                        onToggleExpand={handleToggleExpand}
                      />)}
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Transcript;